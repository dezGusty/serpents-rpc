#include <sstream>
#include <iostream>

// log4cpp
#include "log4cpp/Category.hh"
#include "log4cpp/Appender.hh"
#include "log4cpp/FileAppender.hh"
#include "log4cpp/OstreamAppender.hh"
#include "log4cpp/Layout.hh"
#include "log4cpp/BasicLayout.hh"
#include "log4cpp/PatternLayout.hh"
#include "log4cpp/Priority.hh"

#ifndef USE_LOG4CPP
		void log_(
			const char* argFile,
			int argLineNb,
			const char* argFunction,
			std::stringstream& argString) {
			std::cout << argFile << ":" << argLineNb << " " << argFunction
				<< " " << argString.str() << std::endl;
		}
		void setLogTarget_(std::string type, std::string name){
			//do nothing
		}
#else
		void log_(
			const char* argFile,
			int argLineNb,
			const char* argFunction,
			std::stringstream& argString) {
			std::cout << argFile << ":" << argLineNb << " " << argFunction
				<< " " << argString.str() << std::endl;
		}
		void setLogTarget_(std::string type, std::string filename){
			serpents::log::SSL_Server_Logger::getInstance().addAppender(type, name);
		}
#endif

#define LOG_TEST(f)									\
	do{											\
												\
		std::stringstream s;						\
		s << f;										\
		log_(__FILE__, __LINE__, __FUNCTION__, s);	\
	} while (0)

#define LOG_TARGET(t,n) \
		do {\
			std::stringstream name;\
			std::stringstream filetype;\
			setLogTarget_(type.str(), name.str());\
		} while(0)
namespace serpents{
	namespace log{
		class SSL_Server_Logger
		{
		public:
			static SSL_Server_Logger& getInstance()
			{
				static SSL_Server_Logger INSTANCE;
				return INSTANCE;
			}
			~SSL_Server_Logger(void);
			void addAppender(std::string, std::string);
			void error(std::string);
			void info(std::string);
			void warn(std::string);
		protected:

			log4cpp::Category& root;
			SSL_Server_Logger(void);
			SSL_Server_Logger(const SSL_Server_Logger& rLogger);
			SSL_Server_Logger operator=(const SSL_Server_Logger& rLogger);

		};
	}
}
